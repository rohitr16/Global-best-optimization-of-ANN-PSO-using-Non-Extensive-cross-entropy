using System;
using System.Diagnostics;
namespace ParticleSwarmTraining
{
    class ParticleTrainingProgram
    {
        static void Main(string[] args)
        {

            Console.WriteLine("\nBegin neural network training with particle swarm optimization demo\n");

            int n = 3;

            double[][] trainData;

            //IONOSPHERE
            if (n == 1)
            {
                trainData = new double[45][];

                trainData[0] = new Double[] { 1, 0, 1, 0.06655, 1, -0.18388, 1, -0.27320, 1, -0.43107, 1, -0.41349, 0.96232, -0.51874, 0.90711, -0.59017, 0.89230, -0.66474, 0.69876, -0.70997, 0.70645, -0.76320, 0.63081, -0.80544, 0.55867, -0.89128, 0.47211, -0.86500, 0.40303, -0.83675, 0.30996, -0.89093, 0.22995, -0.89158, 1, 0 };
                trainData[1] = new Double[] { 1, 0, 1, -0.54210, 1, -1, 1, -1, 1, 0.36217, 1, -0.41119, 1, 1, 1, -1, 1, -0.29354, 1, -0.93599, 1, 1, 1, 1, 1, -0.40888, 1, -0.62745, 1, -1, 1, -1, 1, -1, 0, 1 };
                trainData[2] = new Double[] { 1, 0, 1, -0.16316, 1, -0.10169, 0.99999, -0.15197, 1, -0.19277, 0.94055, -0.35151, 0.95735, -0.29785, 0.93719, -0.34412, 0.94486, -0.28106, 0.90137, -0.43383, 0.86043, -0.47308, 0.82987, -0.51220, 0.84080, -0.47137, 0.76224, -0.58370, 0.65723, -0.68794, 0.68714, -0.64537, 0.64727, -0.67226, 1, 0 };
                trainData[3] = new Double[] { 1, 0, 1, -0.86701, 1, 0.22280, 0.85492, -0.39896, 1, -0.12090, 1, 0.35147, 1, 0.07772, 1, -0.14767, 1, -1, 1, -1, 0.61831, 0.15803, 1, 0.62349, 1, -0.17012, 1, 0.35924, 1, -0.66494, 1, 0.88428, 1, -0.18826, 0, 1 };
                trainData[4] = new Double[] { 1, 0, 1, 0.07380, 1, 0.03420, 1, -0.05563, 1, 0.08764, 1, 0.19651, 1, 0.20328, 1, 0.12785, 1, 0.10561, 1, 0.27087, 1, 0.44758, 1, 0.41750, 1, 0.20033, 1, 0.36743, 0.95603, 0.48641, 1, 0.32492, 1, 0.46712, 0, 1 };
                trainData[5] = new Double[] { 1, 0, 0.50932, -0.93996, 1, 0.26708, -0.03520, -1, 1, -1, 0.43685, -1, 0, 0, -1, -0.34265, -0.37681, 0.03623, 1, -1, 0, 0, 0, 0, -0.16253, 0.92236, 0.39752, 0.26501, 0, 0, 1, 0.23188, 0, 0, 0, 1 };
                trainData[6] = new Double[] { 1, 0, 0.99645, 0.06468, 1, -0.01236, 0.97811, 0.02498, 0.96112, 0.02312, 0.99274, 0.07808, 0.89323, 0.10346, 0.94212, 0.05269, 0.88809, 0.11120, 0.86104, 0.08631, 0.81633, 0.11830, 0.83668, 0.14442, 0.81329, 0.13412, 0.79476, 0.13638, 0.79110, 0.15379, 0.77122, 0.15930, 0.70941, 0.12015, 1, 0 };
                trainData[7] = new Double[] { 0, 0, 0, 0, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 0, 1 };
                trainData[8] = new Double[] { 1, 0, 0.67065, 0.02528, 0.66626, 0.05031, 0.57197, 0.18761, 0.08776, 0.34081, 0.63621, 0.12131, 0.62099, 0.14285, 0.78637, 0.10976, 0.58373, 0.18151, 0.14395, 0.41224, 0.53888, 0.21326, 0.51420, 0.22625, 0.48838, 0.23724, 0.46167, 0.24618, 0.43433, 0.25306, 0.40663, 0.25792, 1, 0.33036, 1, 0 };
                trainData[9] = new Double[] { 0, 0, 1, -1, 0, 0, 0, 0, 1, 1, 1, -1, -0.71875, 1, 0, 0, -1, 1, 1, 1, -1, 1, 1, 0.56250, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 0, 1 };
                trainData[10] = new Double[] { 1, 0, 1, -0.00612, 1, -0.09834, 1, -0.07649, 1, -0.10605, 1, -0.11073, 1, -0.39489, 1, -0.15616, 0.92124, -0.31884, 0.86473, -0.34534, 0.91693, -0.44072, 0.96060, -0.46866, 0.81874, -0.40372, 0.82681, -0.42231, 0.75784, -0.38231, 0.80448, -0.40575, 0.74354, -0.45039, 1, 0 };
                trainData[11] = new Double[] { 0, 0, 1, 1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1, -1, 1, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1, -1, 1, 0, 1 };
                trainData[12] = new Double[] { 1, 0, 0.96071, 0.07088, 1, 0.04296, 1, 0.09313, 0.90169, -0.05144, 0.89263, 0.02580, 0.83250, -0.06142, 0.87534, 0.09831, 0.76544, 0.00280, 0.75206, -0.05295, 0.65961, -0.07905, 0.64158, -0.05929, 0.55677, -0.07705, 0.58051, -0.02205, 0.49664, -0.01251, 0.51310, -0.00015, 0.52099, -0.00182, 1, 0 };
                trainData[13] = new Double[] { 0, 0, -1, 1, 0, 0, 0, 0, -1, 1, 1, 1, 0, 0, 0, 0, 1, -1, -1, 1, 1, 1, 0, 0, -1, -1, 1, -1, 1, 1, -1, 1, 0, 0, 0, 1 };
                trainData[14] = new Double[] { 1, 0, 1, -0.06182, 1, 0.02942, 1, -0.05131, 1, -0.01707, 1, -0.11726, 0.84493, -0.05202, 0.93392, -0.06598, 0.69170, -0.07379, 0.65731, -0.20367, 0.94910, -0.31558, 0.80852, -0.31654, 0.84932, -0.34838, 0.72529, -0.29174, 0.73094, -0.38576, 0.54356, -0.26284, 0.64207, -0.39487, 1, 0 };
                trainData[15] = new Double[] { 1, 0, 1, 0.57820, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -0.62796, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 0, 1 };
                trainData[16] = new Double[] { 1, 0, 1, -0.08714, 1, -0.17263, 0.86635, -0.81779, 0.94817, 0.61053, 0.95473, -0.41382, 0.88486, -0.31736, 0.87937, -0.23433, 0.81051, -0.62180, 0.12245, -1, 0.90284, 0.11053, 0.62357, -0.78547, 0.55389, -0.82868, 0.48136, -0.86583, 0.40650, -0.89674, 0.32984, -0.92128, -0.13341, -1, 1, 0 };
                trainData[17] = new Double[] { 0, 0, -1, -1, 0, 0, -1, 1, 1, -0.37500, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1, 1, -1, 0, 0, 1, -1, -1, 1, -1, -1, 0, 0, -1, 1, 0, 1 };
                trainData[18] = new Double[] { 1, 0, 1, 0.08380, 1, 0.17387, 1, -0.13308, 0.98172, 0.64520, 1, 0.47904, 1, 0.59113, 1, 0.70758, 1, 0.82777, 1, 0.95099, 1, 1, 0.98042, 1, 0.91624, 1, 0.83899, 1, 0.74822, 1, 0.64358, 1, 0.52479, 1, 1, 0 };
                trainData[19] = new Double[] { 0, 0, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 0, 0, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 0, 1 };
                trainData[20] = new Double[] { 1, 0, 1, -0.14236, 1, -0.16256, 1, -0.23656, 1, -0.07514, 1, -0.25010, 1, -0.26161, 1, -0.21975, 1, -0.38606, 1, -0.46162, 1, -0.35519, 1, -0.59661, 1, -0.47643, 0.98820, -0.49687, 1, -0.75820, 1, -0.75761, 1, -0.84437, 1, 0 };
                trainData[21] = new Double[] { 1, 0, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -0.01840, 1, -1, 1, 1, 1, -0.85583, 1, 1, 1, -1, 0, 0, 1, 1, 1, -0.79141, 1, 1, 1, 1, 0, 1 };
                trainData[22] = new Double[] { 1, 0, 0.88208, -0.14639, 0.93408, -0.11057, 0.92100, -0.16450, 0.88307, -0.17036, 0.88462, -0.31809, 0.85269, -0.31463, 0.82116, -0.35924, 0.80681, -0.33632, 0.75243, -0.47022, 0.70555, -0.47153, 0.66150, -0.50085, 0.61297, -0.48086, 0.56804, -0.54629, 0.50179, -0.59854, 0.47075, -0.57377, 0.42189, -0.58086, 1, 0 };
                trainData[23] = new Double[] { 1, 0, 0.71253, -0.02595, 0.41287, -0.23067, 0.98019, -0.09473, 0.99709, -0.10236, 1, -0.10951, 0.58965, 1, 0.83726, -1, 0.82270, -0.17863, 0.80760, -0.28257, -0.25914, 0.92730, 0.51933, 0.05456, 0.65493, -0.20392, 0.93124, -0.41307, 0.63811, -0.21901, 0.86136, -0.87354, -0.23186, -1, 0, 1 };
                trainData[24] = new Double[] { 1, 0, 1, -0.15899, 0.72314, 0.27686, 0.83443, -0.58388, 1, -0.28207, 1, -0.49863, 0.79962, -0.12527, 0.76837, 0.14638, 1, 0.39337, 1, 0.26590, 0.96354, -0.01891, 0.92599, -0.91338, 1, 0.14803, 1, -0.11582, 1, -0.11129, 1, 0.53372, 1, -0.57758, 1, 0 };
                trainData[25] = new Double[] { 1, 0, 0.66161, -1, 1, 1, 1, -0.67321, 0.80893, -0.40446, 1, -1, 1, -0.89375, 1, 0.73393, 0.17589, 0.70982, 1, 0.78036, 1, 0.85268, 1, -1, 1, 0.85357, 1, -0.08571, 0.95982, -0.36250, 1, 0.65268, 1, 0.34732, 0, 1 };
                trainData[26] = new Double[] { 1, 0, 1, 0.00433, 1, -0.01209, 1, -0.02960, 1, -0.07014, 0.97839, -0.06256, 1, -0.06544, 0.97261, -0.07917, 0.92561, -0.13665, 0.94184, -0.14327, 0.99589, -0.14248, 0.94815, -0.13565, 0.89469, -0.20851, 0.89067, -0.17909, 0.85644, -0.18552, 0.83777, -0.20101, 0.83867, -0.20766, 1, 0 };
                trainData[27] = new Double[] { 0, 0, 1, 1, 1, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 0, 0, 0, 1 };
                trainData[28] = new Double[] { 1, 0, 0.91241, 0.04347, 0.94191, 0.02280, 0.94705, 0.05345, 0.93582, 0.01321, 0.91911, 0.06348, 0.92766, 0.12067, 0.92048, 0.06211, 0.88899, 0.12722, 0.83744, 0.14439, 0.80983, 0.11849, 0.77041, 0.14222, 0.75755, 0.11299, 0.73550, 0.13282, 0.66387, 0.15300, 0.70925, 0.10754, 0.65258, 0.11447, 1, 0 };
                trainData[29] = new Double[] { 1, 0, 1, 0.02461, 0.99672, 0.04861, 0.97545, 0.07143, 0.61745, -1, 0.91036, 0.11147, 0.88462, 0.53640, 0.82077, 0.14137, 0.76929, 0.15189, 1, 0.41003, 0.65850, 0.16371, 0.60138, 0.16516, 0.54446, 0.16390, 0.48867, 0.16019, 0.43481, 0.15436, 0.38352, 0.14677, 1, 1, 0, 1 };
                trainData[30] = new Double[] { 1, 0, 1, 0.06538, 1, 0.20746, 1, 0.26281, 0.93051, 0.32213, 0.86773, 0.39039, 0.75474, 0.50082, 0.79555, 0.52321, 0.65954, 0.60756, 0.57619, 0.62999, 0.47807, 0.67135, 0.40553, 0.68840, 0.34384, 0.72082, 0.27712, 0.72386, 0.19296, 0.70682, 0.11372, 0.72688, 0.06990, 0.71444, 1, 0 };
                trainData[31] = new Double[] { 1, 0, -1, -1, 1, 1, 1, -0.14375, 0, 0, -1, 1, 1, 1, 0.17917, -1, -1, -1, 0.08750, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 0, 0, 0, 1 };
                trainData[32] = new Double[] { 1, 0, 0.90932, 0.08791, 0.86528, 0.16888, 1, 0.16598, 0.55187, 0.68154, 0.70207, 0.36719, 0.16286, 0.42739, 0.57620, 0.46086, 0.51067, 0.49618, 0.31639, 0.12967, 0.37824, 0.54462, 0.31274, 0.55826, 0.24856, 0.56527, 0.18626, 0.56605, 0.12635, 0.56101, 0.06927, 0.55061, 0.12137, 0.67739, 1, 0 };
                trainData[33] = new Double[] { 1, 0, -0.64286, -1, 1, 0.82857, 1, -1, 1, -0.23393, 1, 0.96161, 1, -0.37679, 1, -1, 1, 0.13839, 1, -1, 1, -0.03393, -0.84286, 1, 0.53750, 0.85714, 1, 1, 1, -1, 1, -1, 1, -1, 0, 1 };
                trainData[34] = new Double[] { 1, 0, 0.99025, -0.05785, 0.99793, -0.13009, 0.98663, -0.19430, 0.99374, -0.25843, 0.92738, -0.30130, 0.92651, -0.37965, 0.89812, -0.43796, 0.84922, -0.52064, 0.87433, -0.57075, 0.79016, -0.59839, 0.74725, -0.64615, 0.68282, -0.68479, 0.65247, -0.73174, 0.61010, -0.75353, 0.54752, -0.80278, 0.49195, -0.83245, 1, 0 };
                trainData[35] = new Double[] { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, -0.37500, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1, 1, 0, 0, 0, 0, 1 };
                trainData[36] = new Double[] { 1, 0, 0.99539, -0.05889, 0.85243, 0.02306, 0.83398, -0.37708, 1, 0.03760, 0.85243, -0.17755, 0.59755, -0.44945, 0.60536, -0.38223, 0.84356, -0.38542, 0.58212, -0.32192, 0.56971, -0.29674, 0.36946, -0.47357, 0.56811, -0.51171, 0.41078, -0.46168, 0.21266, -0.34090, 0.42267, -0.54487, 0.18641, -0.45300, 1, 0 };
                trainData[37] = new Double[] { 1, 0, 1, -0.18829, 0.93035, -0.36156, -0.10868, -0.93597, 1, -0.04549, 0.50874, -0.67743, 0.34432, -0.69707, -0.51685, -0.97515, 0.05499, -0.62237, 0.33109, -1, -0.13151, -0.45300, -0.18056, -0.35734, -0.20332, -0.26569, -0.20468, -0.18401, -0.19040, -0.11593, -0.16626, -0.06288, -0.13738, -0.02447, 0, 1 };
                trainData[38] = new Double[] { 1, 0, 1, -0.03365, 1, 0.00485, 1, -0.12062, 0.88965, 0.01198, 0.73082, 0.05346, 0.85443, 0.00827, 0.54591, 0.00299, 0.83775, -0.13644, 0.75535, -0.08540, 0.70887, -0.27502, 0.43385, -0.12062, 0.57528, -0.40220, 0.58984, -0.22145, 0.43100, -0.17365, 0.60436, -0.24180, 0.56045, -0.38238, 1, 0 };
                trainData[39] = new Double[] { 1, 0, 1, -0.45161, 1, 1, 0.71216, -1, 0, 0, 0, 0, 0, 0, -1, 0.14516, 0.54094, -0.39330, -1, -0.54467, -0.69975, 1, 0, 0, 1, 0.90695, 0.51613, 1, 1, -0.20099, 0.25682, 1, -0.32382, 1, 0, 1 };
                trainData[40] = new Double[] { 1, 0, 1, -0.02401, 0.94140, 0.06531, 0.92106, -0.23255, 0.77152, -0.16399, 0.52798, -0.20275, 0.56409, -0.00712, 0.34395, -0.27457, 0.52940, -0.21780, 0.45107, -0.17813, 0.05982, -0.35575, 0.02309, -0.52879, 0.03286, -0.65158, 0.13290, -0.53206, 0.02431, -0.62197, -0.05707, -0.59573, -0.04608, -0.65697, 1, 0 };
                trainData[41] = new Double[] { 1, 0, 0.02337, -0.00592, -0.09924, -0.11949, -0.00763, -0.11824, 0.14706, 0.06637, 0.03786, -0.06302, 0, 0, -0.04572, -0.15540, -0.00343, -0.10196, -0.11575, -0.05414, 0.01838, 0.03669, 0.01519, 0.00888, 0.03513, -0.01535, -0.03240, 0.09223, -0.07859, 0.00732, 0, 0, -0.00039, 0.12011, 0, 1 };
                trainData[42] = new Double[] { 1, 0, 0.97588, -0.10602, 0.94601, -0.20800, 0.92806, -0.28350, 0.85996, -0.27342, 0.79766, -0.47929, 0.78225, -0.50764, 0.74628, -0.61436, 0.57945, -0.68086, 0.37852, -0.73641, 0.36324, -0.76562, 0.31898, -0.79753, 0.22792, -0.81634, 0.13659, -0.82510, 0.04606, -0.82395, -0.04262, -0.81318, -0.13832, -0.80975, 1, 0 };
                trainData[43] = new Double[] { 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 1, 1, -1, -1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1 };
                trainData[44] = new Double[] { 1, 0, 0.96355, -0.07198, 1, -0.14333, 1, -0.21313, 1, -0.36174, 0.92570, -0.43569, 0.94510, -0.40668, 0.90392, -0.46381, 0.98305, -0.35257, 0.84537, -0.66020, 0.75346, -0.60589, 0.69637, -0.64225, 0.85106, -0.65440, 0.57577, -0.69712, 0.25435, -0.63919, 0.45114, -0.72779, 0.38895, -0.73420, 1, 0 };

            }
            else if (n == 2)
            {
                //  DERMATOLOGY 
                trainData = new double[61][];

                trainData[0] = new Double[] { 2, 2, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 55, 0, 0, 0, 0, 1, 0 };
                trainData[1] = new Double[] { 3, 3, 3, 2, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 2, 0, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 1 };
                trainData[2] = new Double[] { 2, 1, 2, 3, 1, 3, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 3, 2, 0, 0, 2, 3, 26, 0, 0, 0, 1, 0, 0 };
                trainData[3] = new Double[] { 2, 2, 2, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 3, 0, 0, 2, 0, 3, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 40, 0, 0, 0, 0, 0, 1 };
                trainData[4] = new Double[] { 2, 3, 2, 2, 2, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 3, 0, 0, 2, 3, 45, 0, 0, 0, 1, 0, 0 };
                trainData[5] = new Double[] { 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 41, 0, 0, 0, 0, 1, 0 };
                trainData[6] = new Double[] { 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 18, 0, 1, 0, 0, 0, 0 };
                trainData[7] = new Double[] { 2, 2, 3, 3, 3, 3, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 0, 0, 3, 3, 57, 0, 0, 0, 1, 0, 0 };
                trainData[8] = new Double[] { 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 22, 0, 0, 1, 0, 0, 0 };
                trainData[9] = new Double[] { 2, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 30, 0, 0, 1, 0, 0, 0 };
                trainData[10] = new Double[] { 3, 3, 2, 1, 1, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 3, 2, 3, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 0, 1 };
                trainData[11] = new Double[] { 2, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 21, 0, 0, 0, 0, 1, 0 };
                trainData[12] = new Double[] { 3, 3, 1, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 22, 0, 0, 0, 0, 1, 0 };
                trainData[13] = new Double[] { 2, 3, 3, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 2, 1, 2, 1, 2, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 1 };
                trainData[14] = new Double[] { 2, 2, 3, 3, 0, 3, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 0, 3, 0, 3, 0, 0, 1, 3, 65, 0, 0, 0, 1, 0, 0 };
                trainData[15] = new Double[] { 1, 1, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 40, 0, 0, 1, 0, 0, 0 };
                trainData[16] = new Double[] { 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 30, 0, 0, 0, 0, 1, 0 };
                trainData[17] = new Double[] { 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 1, 0, 0, 2, 0, 0, 2, 0, 2, 3, 3, 3, 2, 3, 0, 3, 0, 0, 0, 0, 0, 2, 0, 38, 0, 0, 0, 0, 0, 1 };
                trainData[18] = new Double[] { 2, 1, 3, 3, 3, 3, 0, 0, 2, 0, 0, 3, 0, 0, 0, 3, 2, 0, 1, 0, 0, 0, 0, 0, 3, 0, 2, 0, 3, 0, 0, 2, 3, 23, 0, 0, 0, 1, 0, 0 };
                trainData[19] = new Double[] { 1, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 2, 2, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 17, 0, 1, 0, 0, 0, 0 };
                trainData[20] = new Double[] { 2, 1, 1, 2, 0, 0, 3, 0, 1, 2, 0, 0, 0, 1, 0, 0, 1, 2, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 8, 1, 0, 0, 0, 0, 0 };
                trainData[21] = new Double[] { 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 1, 2, 0, 2, 1, 2, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 51, 0, 0, 0, 0, 1, 0 };
                trainData[22] = new Double[] { 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 1, 2, 0, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 42, 0, 1, 0, 0, 0, 0 };
                trainData[23] = new Double[] { 2, 2, 2, 3, 2, 2, 0, 2, 0, 0, 0, 3, 2, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 3, 0, 3, 0, 2, 0, 0, 2, 3, 44, 0, 0, 0, 1, 0, 0 };
                trainData[24] = new Double[] { 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 22, 0, 1, 0, 0, 0, 0 };
                trainData[25] = new Double[] { 2, 1, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 33, 0, 0, 0, 0, 0, 1 };
                trainData[26] = new Double[] { 1, 1, 0, 1, 0, 0, 3, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 2, 1, 0, 10, 1, 0, 0, 0, 0, 0 };
                trainData[27] = new Double[] { 1, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 17, 0, 1, 0, 0, 0, 0 };
                trainData[28] = new Double[] { 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 2, 0, 43, 0, 0, 0, 0, 1, 0 };
                trainData[29] = new Double[] { 1, 1, 2, 3, 2, 2, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 2, 1, 2, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 1, 0, 2, 3, 50, 0, 0, 0, 1, 0, 0 };
                trainData[30] = new Double[] { 3, 2, 1, 2, 0, 0, 0, 0, 1, 2, 0, 0, 0, 1, 0, 0, 2, 0, 3, 2, 2, 2, 1, 2, 0, 2, 0, 0, 0, 0, 0, 1, 0, 50, 0, 0, 0, 0, 0, 1 };
                trainData[31] = new Double[] { 3, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 0, 1, 0 };
                trainData[32] = new Double[] { 2, 3, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 2, 2, 3, 3, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 34, 0, 0, 0, 0, 0, 1 };
                trainData[33] = new Double[] { 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 2, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 1, 0 };
                trainData[34] = new Double[] { 2, 1, 2, 3, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 2, 3, 26, 0, 0, 0, 1, 0, 0 };
                trainData[35] = new Double[] { 3, 3, 2, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 1, 0, 0, 2, 2, 3, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 46, 0, 0, 0, 0, 0, 1 };
                trainData[36] = new Double[] { 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 51, 0, 0, 0, 0, 1, 0 };
                trainData[37] = new Double[] { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 62, 0, 0, 1, 0, 0, 0 };
                trainData[38] = new Double[] { 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 1 };
                trainData[39] = new Double[] { 2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 35, 0, 0, 0, 0, 1, 0 };
                trainData[40] = new Double[] { 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 30, 0, 1, 0, 0, 0, 0 };
                trainData[41] = new Double[] { 2, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 2, 1, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 3, 3, 48, 0, 0, 0, 1, 0, 0 };
                trainData[42] = new Double[] { 2, 1, 1, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 46, 0, 0, 1, 0, 0, 0 };
                trainData[43] = new Double[] { 2, 1, 1, 1, 0, 0, 2, 0, 3, 2, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 12, 1, 0, 0, 0, 0, 0 };
                trainData[44] = new Double[] { 1, 2, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 52, 0, 0, 0, 0, 1, 0 };
                trainData[45] = new Double[] { 2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 2, 2, 60, 0, 0, 0, 1, 0, 0 };
                trainData[46] = new Double[] { 3, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 2, 0, 3, 0, 0, 2, 3, 32, 0, 0, 0, 1, 0, 0 };
                trainData[47] = new Double[] { 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 35, 0, 0, 1, 0, 0, 0 };
                trainData[48] = new Double[] { 2, 2, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1, 0, 0, 2, 1, 1, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 41, 0, 0, 0, 0, 0, 1 };
                trainData[49] = new Double[] { 3, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 2, 2, 2, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 48, 0, 0, 0, 0, 0, 1 };
                trainData[50] = new Double[] { 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 51, 0, 1, 0, 0, 0, 0 };
                trainData[51] = new Double[] { 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 2, 1, 3, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 19, 0, 0, 0, 0, 0, 1 };
                trainData[52] = new Double[] { 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 22, 0, 0, 0, 0, 1, 0 };
                trainData[53] = new Double[] { 2, 1, 1, 3, 0, 3, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 3, 0, 1, 0, 0, 2, 2, 29, 0, 0, 0, 1, 0, 0 };
                trainData[54] = new Double[] { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 25, 0, 0, 1, 0, 0, 0 };
                trainData[55] = new Double[] { 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 33, 0, 0, 0, 0, 1, 0 };
                trainData[56] = new Double[] { 2, 2, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 8, 1, 0, 0, 0, 0, 0 };
                trainData[57] = new Double[] { 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 40, 0, 0, 0, 0, 0, 1 };
                trainData[58] = new Double[] { 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 33, 0, 1, 0, 0, 0, 0 };
                trainData[59] = new Double[] { 3, 3, 2, 1, 1, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 3, 2, 3, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 42, 0, 0, 0, 0, 0, 1 };
                trainData[60] = new Double[] { 2, 2, 0, 0, 0, 0, 2, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 1, 0, 10, 1, 0, 0, 0, 0, 0 };

            }
            //BEAM BALANCE

            else
            {
                trainData = new double[57][];

                trainData[0] = new Double[] { 1, 1, 1, 1, 0, 1, 0 };
                trainData[1] = new Double[] { 4, 3, 1, 1, 1, 0, 0 };
                trainData[2] = new Double[] { 1, 1, 1, 2, 0, 0, 1 };
                trainData[3] = new Double[] { 4, 3, 1, 2, 1, 0, 0 };
                trainData[4] = new Double[] { 1, 1, 1, 3, 0, 0, 1 };
                trainData[5] = new Double[] { 4, 3, 1, 3, 1, 0, 0 };
                trainData[6] = new Double[] { 1, 1, 1, 4, 0, 0, 1 };
                trainData[7] = new Double[] { 4, 3, 1, 4, 1, 0, 0 };
                trainData[8] = new Double[] { 1, 1, 1, 5, 0, 0, 1 };
                trainData[9] = new Double[] { 4, 3, 1, 5, 1, 0, 0 };
                trainData[10] = new Double[] { 1, 1, 2, 1, 0, 0, 1 };
                trainData[11] = new Double[] { 4, 3, 2, 1, 1, 0, 0 };
                trainData[12] = new Double[] { 1, 1, 2, 2, 0, 0, 1 };
                trainData[13] = new Double[] { 4, 3, 2, 2, 1, 0, 0 };
                trainData[14] = new Double[] { 1, 1, 2, 3, 0, 0, 1 };
                trainData[15] = new Double[] { 4, 3, 2, 3, 1, 0, 0 };
                trainData[16] = new Double[] { 1, 1, 2, 4, 0, 0, 1 };
                trainData[17] = new Double[] { 4, 3, 2, 4, 1, 0, 0 };
                trainData[18] = new Double[] { 1, 1, 2, 5, 0, 0, 1 };
                trainData[19] = new Double[] { 4, 3, 2, 5, 1, 0, 0 };
                trainData[20] = new Double[] { 1, 1, 3, 1, 0, 0, 1 };
                trainData[21] = new Double[] { 4, 3, 3, 1, 1, 0, 0 };
                trainData[22] = new Double[] { 1, 1, 3, 2, 0, 0, 1 };
                trainData[23] = new Double[] { 4, 3, 3, 2, 1, 0, 0 };
                trainData[24] = new Double[] { 1, 1, 3, 3, 0, 0, 1 };
                trainData[25] = new Double[] { 4, 3, 3, 3, 1, 0, 0 };
                trainData[26] = new Double[] { 1, 1, 3, 4, 0, 0, 1 };
                trainData[27] = new Double[] { 4, 3, 3, 4, 0, 1, 0 };
                trainData[28] = new Double[] { 1, 1, 3, 5, 0, 0, 1 };
                trainData[29] = new Double[] { 5, 5, 1, 1, 1, 0, 0 };
                trainData[30] = new Double[] { 1, 1, 4, 1, 0, 0, 1 };
                trainData[31] = new Double[] { 5, 5, 1, 2, 1, 0, 0 };
                trainData[32] = new Double[] { 1, 1, 4, 2, 0, 0, 1 };
                trainData[33] = new Double[] { 5, 5, 1, 3, 1, 0, 0 };
                trainData[34] = new Double[] { 1, 1, 4, 3, 0, 0, 1 };
                trainData[35] = new Double[] { 5, 5, 1, 4, 1, 0, 0 };
                trainData[36] = new Double[] { 1, 1, 4, 4, 0, 0, 1 };
                trainData[37] = new Double[] { 5, 5, 1, 5, 1, 0, 0 };
                trainData[38] = new Double[] { 1, 1, 4, 5, 0, 0, 1 };
                trainData[39] = new Double[] { 5, 5, 2, 1, 1, 0, 0 };
                trainData[40] = new Double[] { 1, 1, 5, 1, 0, 0, 1 };
                trainData[41] = new Double[] { 5, 5, 2, 2, 1, 0, 0 };
                trainData[42] = new Double[] { 1, 1, 5, 2, 0, 0, 1 };
                trainData[43] = new Double[] { 5, 5, 2, 3, 1, 0, 0 };
                trainData[44] = new Double[] { 1, 1, 5, 3, 0, 0, 1 };
                trainData[45] = new Double[] { 5, 5, 2, 4, 1, 0, 0 };
                trainData[46] = new Double[] { 4, 5, 5, 4, 0, 1, 0 };
                trainData[47] = new Double[] { 5, 5, 2, 5, 1, 0, 0 };
                trainData[48] = new Double[] { 1, 1, 5, 5, 0, 0, 1 };
                trainData[49] = new Double[] { 5, 1, 1, 5, 0, 1, 0 };
                trainData[50] = new Double[] { 4, 4, 5, 5, 0, 0, 1 };
                trainData[51] = new Double[] { 4, 4, 4, 4, 0, 1, 0 };
                trainData[52] = new Double[] { 1, 1, 5, 4, 0, 0, 1 };
                trainData[53] = new Double[] { 4, 5, 4, 5, 0, 1, 0 };
                trainData[54] = new Double[] { 4, 5, 1, 1, 1, 0, 0 };
                trainData[55] = new Double[] { 5, 1, 2, 5, 0, 0, 1 };
                trainData[56] = new Double[] { 5, 1, 3, 1, 1, 0, 0 };

            }


            double[][] testData;

            if (n == 1)
            {
                testData = new double[39][];

                testData[0] = new double[] { 1, 0, 1, -0.03730, 1, -0.07383, 0.99601, -0.11039, 0.99838, -0.09931, 0.98941, -0.13814, 0.96674, -0.21695, 0.95288, -0.25099, 0.91236, -0.34400, 0.90581, -0.32152, 0.89991, -0.34691, 0.87874, -0.37643, 0.86213, -0.42990, 0.83172, -0.43122, 0.81433, -0.42593, 0.77919, -0.47977, 0.75115, -0.50152, 1, 0 };
                testData[1] = new double[] { 1, 0, 0.94598, -0.02685, -1, 0.26131, -0.36393, 0.35639, 0.69258, -0.63427, 1, -0.03353, -0.29020, -0.00550, -0.54852, 0.15452, 0.91921, -0.46270, 1, -0.50424, -0.29735, -0.31454, -0.73864, 0.37361, 0.83872, -0.46734, 0.52208, -0.58130, 1, -0.61393, -0.09634, 0.20477, -0.06117, 0.41913, 0, 1 };
                testData[2] = new double[] { 1, 0, 0.98166, 0.00874, 0.98103, -0.03818, 0.97565, -0.05699, 0.95947, -0.06971, 0.99004, -0.04507, 0.94713, -0.11102, 0.93369, -0.12790, 0.94217, -0.11583, 0.79682, -0.19200, 0.88274, -0.17387, 0.86257, -0.18739, 0.88487, -0.19689, 0.81813, -0.21136, 0.78546, -0.23864, 0.76911, -0.23095, 0.74323, -0.23902, 1, 0 };
                testData[3] = new double[] { 1, 0, 0, 0, 1, 0.51724, 0, 0, 0.10991, -1, 0, 0, 0, 0, -1, -0.22414, -0.55711, -0.83297, 0.76940, 0.63147, 0, 0, 0.53448, 0.35668, -0.90302, 0.44828, 1, -1, -1, 0.81573, 0, 0, 0, 0, 0, 1 };
                testData[4] = new double[] { 1, 0, 0.84134, -0.18362, 0.43644, 0.02919, 0.93421, -0.00267, 0.87947, 0.13795, 0.81121, -0.01789, 0.88559, 0.54991, 0.91714, -0.57486, 0.75000, -0.29520, 0.86676, -0.20104, 1, 1, 0.46610, -0.16290, 0.90066, -0.02778, 0.93358, -0.01158, 0.61582, -0.32298, 0.84463, -0.25706, 0.93323, -0.01425, 1, 0 };
                testData[5] = new double[] { 0, 0, 1, 1, 1, -1, 0, 0, 0, 0, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 0, 0, 1, -1, 1, -1, 1, 1, -1, -1, 0, 0, 0, 0, 0, 1 };
                testData[6] = new double[] { 1, 0, 1, 1, 1, 1, 0.91010, 1, -0.26970, 1, -0.83152, 1, -1, 1, -1, 0.72526, -1, -0.57779, -1, -0.42052, -1, -1, -0.52838, -1, 0.90014, -1, 1, -1, 1, -1, 1, -0.34686, 1, 0.34845, 1, 0 };
                testData[7] = new double[] { 1, 0, -0.67935, -1, -1, 1, 1, 0.63317, 0.03515, -1, -1, -1, 1, 1, 0.88683, -1, -1, 1, 0.83840, 1, 1, -1, -1, -1, -0.18856, 1, 1, -1, -1, -1, -1, 1, 1, 0.33611, 0, 1 };
                testData[8] = new double[] { 1, 0, 0.95659, 0.08143, 0.97487, -0.05667, 0.97165, -0.08484, 0.96097, -0.06561, 0.94717, 0.01279, 0.95436, -0.16795, 0.94612, -0.19497, 0.99630, -0.32268, 0.90343, -0.35902, 0.91428, -0.27316, 0.90140, -0.29807, 0.99899, -0.40747, 0.87244, -0.34586, 0.92059, -0.30619, 0.83951, -0.39061, 0.82166, -0.41173, 1, 0 };
                testData[9] = new double[] { 1, 0, 0.08333, -0.20685, -1, 1, -1, 1, 0.71875, 0.47173, -0.82143, -0.62723, -1, -1, -1, 1, -0.02753, 0.59152, -0.42113, -0.42113, -0.74628, -1, -1, -0.46801, -1, 0.23810, 1, -1, -1, -0.38914, -1, -1, -1, 0.61458, 0, 1 };
                testData[10] = new double[] { 1, 0, 1, -0.02259, 1, -0.04494, 1, -0.06682, 1, -0.08799, 1, 0.56173, 1, -0.12738, 1, -0.14522, 1, 0.32407, 1, -0.17639, 0.99484, -0.18949, 0.95601, -0.20081, 1, -0.92284, 0.87280, -0.21793, 0.82920, -0.22370, 0.78479, -0.22765, 0.73992, -0.22981, 1, 0 };
                testData[11] = new double[] { 0, 0, -1, 1, 1, -1, -1, 1, 0, 0, 1, 1, -1, -0.18750, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 0, 0, -1, -1, 0, 1 };
                testData[12] = new double[] { 1, 0, 1, 0.05812, 0.94525, 0.07418, 0.99952, 0.13231, 1, -0.01911, 0.94846, 0.07033, 0.95713, 0.14644, 0.94862, 0.11224, 0.90896, 0.20119, 0.96741, 0.16265, 0.99695, 0.14258, 0.90784, 0.16410, 0.91667, 0.22431, 0.88423, 0.23571, 0.88568, 0.22511, 0.78324, 0.29576, 0.83574, 0.31166, 1, 0 };
                testData[13] = new double[] { 1, 0, 0.17188, -1, -1, 1, 0, 0, 0, 0, -1, 1, 0, 0, -0.61354, -0.67708, 0.80521, 0.36146, 0.51979, 0.14375, 0, 0, -1, -0.27083, -0.84792, 0.96250, 1, 1, -1, 0.67708, 0, 0, 0, 0, 0, 1 };
                testData[14] = new double[] { 1, 0, 1, 0.09771, 1, 0.12197, 1, 0.22574, 0.98602, 0.09237, 0.94930, 0.19211, 0.92992, 0.24288, 0.89241, 0.28343, 0.85529, 0.26721, 0.83656, 0.33129, 0.83393, 0.31698, 0.74829, 0.39597, 0.76193, 0.34658, 0.68452, 0.42746, 0.62764, 0.46031, 0.56791, 0.47033, 0.54252, 0.50903, 1, 0 };
                testData[15] = new double[] { 1, 0, 0.01667, -0.35625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.12292, -0.55000, 0.22813, 0.82813, 1, -0.42292, 0, 0, 0.08333, -1, -0.10625, -0.16667, 1, -0.76667, -1, 0.18854, 0, 0, 1, -0.27292, 0, 1 };
                testData[16] = new double[] { 1, 0, 1, 0.16801, 0.99352, 0.16334, 0.94616, 0.33347, 0.91759, 0.22610, 0.91408, 0.37107, 0.84250, 0.46899, 0.81011, 0.49225, 0.78473, 0.48311, 0.65091, 0.56977, 0.56553, 0.58071, 0.55586, 0.64720, 0.48311, 0.55236, 0.43317, 0.69129, 0.35684, 0.76147, 0.33921, 0.66844, 0.22101, 0.78685, 1, 0 };
                testData[17] = new double[] { 1, 0, 0.63816, 1, 0.20833, -1, 1, 1, 0.87719, 0.30921, -0.66886, 1, -0.05921, 0.58772, 0.01754, 0.05044, -0.51535, -1, 0.14254, -0.03289, 0.32675, -0.43860, -1, 1, 0.80921, -1, 1, -0.06140, 1, 1, 0.20614, -1, 1, 1, 0, 1 };
                testData[18] = new double[] { 1, 0, 1, -0.41457, 1, 0.76131, 0.87060, 0.18593, 1, -0.09925, 0.93844, 0.47990, 0.65452, -0.16080, 1, 0.00879, 0.97613, -0.50126, 0.80025, -0.24497, 0.88065, -0.19095, 1, -0.12312, 0.93593, 0.10678, 0.92890, -0.07249, 1, -0.27387, 0.43970, 0.19849, 0.51382, -0.05402, 1, 0 };
                testData[19] = new double[] { 1, 0, 0.84783, 0.10598, 1, 0.39130, 1, -1, 0.66938, 0.08424, 1, 0.27038, 1, 0.60598, 1, 0.35507, 1, 0.02672, 0.58424, -0.43025, 1, 0.63496, 0.89130, 0.26585, 0.91033, -0.33333, 1, 0.15942, 0.37681, -0.01947, 1, 0.22464, 1, 0.37409, 0, 1 };
                testData[20] = new double[] { 1, 0, 1, 0.28046, 1, 0.02477, 1, 0.07764, 1, 0.04317, 0.98762, 0.33266, 1, 0.05489, 1, 0.04384, 0.95750, -0.24598, 0.84371, -0.08668, 1, 0.04150, 0.99933, 0.27376, 1, -0.39056, 0.96414, -0.02174, 0.86747, 0.23360, 0.94578, -0.22021, 0.80355, -0.07329, 1, 0 };
                testData[21] = new double[] { 0, 0, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 0.65625, 0, 0, 1, -1, 0, 1 };
                testData[22] = new double[] { 1, 0, 1, 0.67784, 0.81309, 0.82021, 0.43019, 1, 0.20619, 0.80541, -0.43872, 1, -0.79135, 0.77092, -1, 0.40268, -0.39046, -0.58634, -0.97907, -0.42822, -0.73083, -0.76339, -0.37671, -0.97491, 0.41366, -1, 0.41778, -0.93296, 0.25773, -1, 0.93570, -0.35222, 0.98816, 0.03446, 1, 0 };
                testData[23] = new double[] { 1, 0, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.5, 0, 0, 1, -1, 1, -1, 0, 1 };
                testData[24] = new double[] { 1, 0, 1, 0.03529, 1, 0.18281, 1, 0.26968, 1, 0.25068, 1, 0.28778, 1, 0.38643, 1, 0.31674, 1, 0.65701, 1, 0.53846, 1, 0.61267, 1, 0.59457, 0.89593, 0.68326, 0.89502, 0.71374, 0.85611, 0.67149, 0.74389, 0.85611, 0.71493, 0.75837, 1, 0 };
                testData[25] = new double[] { 0, 0, 1, -1, 1, 1, -1, -1, 1, -1, 0, 0, 0, 0, -1, 1, 1, -1, 1, -1, -0.75000, 1, 1, -1, 1, -1, 1, -1, -1, -1, 0, 0, 1, -1, 0, 1 };
                testData[26] = new double[] { 1, 0, 0.96087, 0.08620, 0.96760, 0.19279, 0.96026, 0.27451, 0.98044, 0.35052, 0.92867, 0.46281, 0.86265, 0.52517, 0.82820, 0.58794, 0.73242, 0.69065, 0.69003, 0.73140, 0.54473, 0.68820, 0.48339, 0.76197, 0.40615, 0.74689, 0.33401, 0.83796, 0.24944, 0.86061, 0.13756, 0.86835, 0.09048, 0.86285, 1, 0 };
                testData[27] = new double[] { 1, 0, 0.69444, 0.38889, 0, 0, -0.32937, 0.69841, 0, 0, 0, 0, 0, 0, 0.20635, -0.24206, 0.21032, 0.19444, 0.46429, 0.78175, 0, 0, 0, 0, 0.73413, 0.27381, 0.76190, 0.63492, 0, 0, 0, 0, 0, 0, 0, 1 };
                testData[28] = new double[] { 1, 0, 1, 0.05070, 1, 0.10827, 1, 0.19498, 1, 0.28453, 1, 0.34826, 1, 0.38261, 0.94575, 0.42881, 0.89126, 0.50391, 0.75906, 0.58801, 0.80644, 0.59962, 0.79578, 0.62758, 0.66643, 0.63942, 0.59417, 0.69435, 0.49538, 0.72684, 0.47027, 0.71689, 0.33381, 0.75243, 1, 0 };
                testData[29] = new double[] { 0, 0, 1, 1, 0, 0, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 0, 0, 1, -1, 0, 1 };
                testData[30] = new double[] { 1, 0, 1, 0.04078, 1, 0.11982, 1, 0.16159, 1, 0.27921, 0.98703, 0.30889, 0.92745, 0.37639, 0.91118, 0.39749, 0.81939, 0.46059, 0.78619, 0.46994, 0.79400, 0.56282, 0.70331, 0.58129, 0.67077, 0.59723, 0.58903, 0.60990, 0.53952, 0.60932, 0.45312, 0.63636, 0.40442, 0.62658, 1, 0 };
                testData[31] = new double[] { 0, 0, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 0, 1 };
                testData[32] = new double[] { 1, 0, 1, 0.24168, 1, 0.48590, 1, 0.72973, 1, 1, 1, 1, 1, 1, 1, 0.77128, 1, 1, 1, 1, 0.74468, 1, 0.89647, 1, 0.64628, 1, 0.38255, 1, 0.10819, 1, -0.17370, 1, -0.81383, 1, 1, 0 };
                testData[33] = new double[] { 0, 0, 1, 1, 1, -1, 1, 1, -1, 1, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 0, 1 };
                testData[34] = new double[] { 1, 0, 1, -0.06604, 1, 0.62937, 1, 0.09557, 1, 0.20280, 1, -1, 1, -0.40559, 1, -0.15851, 1, 0.04895, 1, -0.61538, 1, -0.26573, 1, -1, 1, -0.58042, 1, -0.81372, 1, -1, 1, -0.78555, 1, -0.48252, 1, 0 };
                testData[35] = new double[] { 0, 0, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 0, 1 };
                testData[36] = new double[] { 1, 0, 0.92277, 0.07804, 0.92679, 0.16251, 0.89702, 0.24618, 0.84111, 0.35197, 0.78801, 0.42196, 0.70716, 0.46983, 0.70796, 0.56476, 0.60459, 0.64200, 0.51247, 0.64924, 0.39903, 0.66975, 0.34232, 0.68343, 0.23693, 0.76146, 0.18765, 0.73885, 0.09694, 0.71038, 0.02735, 0.77072, -0.04023, 0.69509, 1, 0 };
                testData[37] = new double[] { 1, 0, 0.68198, -0.17314, 0.82332, 0.21908, 0.46643, 0.32862, 0.25795, 0.58304, 1, -0.15194, 0.01060, 0.44523, 0.01060, 0.38869, 0.18681, 0.41168, 0.10567, 0.36353, 0.04325, 0.30745, -0.00083, 0.24936, -0.02862, 0.19405, -0.04314, 0.14481, -0.04779, 0.10349, -0.04585, 0.07064, -0.04013, 0.04586, 0, 1 };
                testData[38] = new double[] { 1, 0, 0.74852, -0.02811, 0.65680, -0.05178, 0.80621, 0.02811, 0.85947, 0.02515, 0.63462, 0.08728, 0.71598, 0.07840, 0.73077, 0.05178, 0.78550, -0.27811, 0.65976, -0.01479, 0.78698, 0.06953, 0.34615, -0.18639, 0.65385, 0.02811, 0.61009, -0.06637, 0.53550, -0.21154, 0.59024, -0.14053, 0.56361, 0.02959, 1, 0 };

            }

            else if (n == 2)
            {
                testData = new double[61][];

                testData[0] = new double[] { 2, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 36, 0, 0, 0, 0, 1, 0 };
                testData[1] = new double[] { 3, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 1, 3, 60, 0, 0, 0, 1, 0, 0 };
                testData[2] = new double[] { 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 1, 0, 0, 2, 0, 2, 3, 3, 3, 1, 3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 36, 0, 0, 0, 0, 0, 1 };
                testData[3] = new double[] { 1, 1, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 21, 0, 0, 1, 0, 0, 0 };
                testData[4] = new double[] { 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 40, 0, 1, 0, 0, 0, 0 };
                testData[5] = new double[] { 3, 3, 3, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 21, 0, 0, 0, 0, 0, 1 };
                testData[6] = new double[] { 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 34, 0, 0, 0, 0, 1, 0 };
                testData[7] = new double[] { 2, 1, 2, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 13, 1, 0, 0, 0, 0, 0 };
                testData[8] = new double[] { 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 3, 52, 0, 0, 0, 1, 0, 0 };
                testData[9] = new double[] { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 48, 0, 1, 0, 0, 0, 0 };
                testData[10] = new double[] { 2, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 17, 0, 0, 1, 0, 0, 0 };
                testData[11] = new double[] { 3, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 25, 0, 0, 0, 0, 1, 0 };
                testData[12] = new double[] { 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 1, 0 };
                testData[13] = new double[] { 2, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 62, 0, 0, 0, 0, 0, 1 };
                testData[14] = new double[] { 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 3, 1, 1, 1, 0, 0, 0, 0, 0, 2, 0, 3, 3, 3, 0, 0, 3, 3, 52, 0, 0, 0, 1, 0, 0 };
                testData[15] = new double[] { 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 27, 0, 1, 0, 0, 0, 0 };
                testData[16] = new double[] { 3, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 40, 0, 0, 0, 0, 0, 1 };
                testData[17] = new double[] { 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 31, 0, 0, 0, 0, 1, 0 };
                testData[18] = new double[] { 2, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 27, 0, 0, 0, 0, 1, 0 };
                testData[19] = new double[] { 3, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 1, 0 };
                testData[20] = new double[] { 1, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 55, 0, 1, 0, 0, 0, 0 };
                testData[21] = new double[] { 2, 2, 2, 3, 3, 0, 0, 0, 0, 2, 0, 0, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 30, 0, 0, 0, 0, 0, 1 };
                testData[22] = new double[] { 3, 3, 2, 2, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 1, 2, 1, 1, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 42, 0, 0, 0, 0, 0, 1 };
                testData[23] = new double[] { 2, 1, 2, 1, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 3, 3, 48, 0, 0, 0, 1, 0, 0 };
                testData[24] = new double[] { 0, 1, 2, 1, 1, 0, 1, 0, 2, 3, 0, 0, 0, 1, 0, 0, 3, 1, 2, 3, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 22, 0, 0, 0, 0, 0, 1 };
                testData[25] = new double[] { 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 31, 0, 0, 1, 0, 0, 0 };
                testData[26] = new double[] { 3, 2, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 3, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 50, 0, 0, 0, 0, 1, 0 };
                testData[27] = new double[] { 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 43, 0, 0, 0, 0, 1, 0 };
                testData[28] = new double[] { 1, 1, 1, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 3, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 30, 0, 1, 0, 0, 0, 0 };
                testData[29] = new double[] { 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 1, 0, 0, 1, 0, 0, 2, 1, 2, 2, 2, 2, 2, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 42, 0, 0, 0, 0, 0, 1 };
                testData[30] = new double[] { 2, 1, 1, 3, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 0, 0, 3, 3, 22, 0, 0, 0, 1, 0, 0 };
                testData[31] = new double[] { 2, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 18, 0, 0, 1, 0, 0, 0 };
                testData[32] = new double[] { 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 35, 0, 0, 0, 0, 1, 0 };
                testData[33] = new double[] { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 60, 0, 1, 0, 0, 0, 0 };
                testData[34] = new double[] { 2, 2, 2, 2, 2, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 28, 0, 0, 0, 0, 0, 1 };
                testData[35] = new double[] { 2, 2, 1, 0, 0, 0, 2, 0, 2, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 13, 1, 0, 0, 0, 0, 0 };
                testData[36] = new double[] { 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 1, 0 };
                testData[37] = new double[] { 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 64, 0, 1, 0, 0, 0, 0 };
                testData[38] = new double[] { 3, 3, 3, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 3, 0, 43, 0, 0, 0, 0, 0, 1 };
                testData[39] = new double[] { 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 20, 0, 0, 0, 0, 1, 0 };
                testData[40] = new double[] { 1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 3, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 34, 0, 0, 0, 0, 1, 0 };
                testData[41] = new double[] { 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 1, 0, 0, 1, 0, 0, 2, 1, 2, 2, 2, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 39, 0, 0, 0, 0, 0, 1 };
                testData[42] = new double[] { 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 60, 0, 0, 1, 0, 0, 0 };
                testData[43] = new double[] { 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 1, 2, 1, 1, 1, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 38, 0, 0, 0, 0, 0, 1 };
                testData[44] = new double[] { 2, 2, 3, 2, 1, 3, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 0, 0, 2, 3, 44, 0, 0, 0, 1, 0, 0 };
                testData[45] = new double[] { 3, 2, 1, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 1, 0, 0, 2, 3, 2, 2, 2, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 1, 36, 0, 0, 0, 0, 0, 1 };
                testData[46] = new double[] { 2, 2, 2, 3, 2, 0, 0, 0, 3, 3, 0, 0, 0, 1, 0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 41, 0, 0, 0, 0, 0, 1 };
                testData[47] = new double[] { 2, 2, 2, 3, 2, 2, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 3, 2, 3, 0, 0, 3, 3, 18, 0, 0, 0, 1, 0, 0 };
                testData[48] = new double[] { 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 39, 0, 1, 0, 0, 0, 0 };
                testData[49] = new double[] { 2, 2, 3, 2, 3, 3, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 3, 0, 2, 0, 0, 0, 0, 0, 3, 0, 2, 2, 2, 0, 0, 2, 2, 40, 0, 0, 0, 1, 0, 0 };
                testData[50] = new double[] { 1, 1, 1, 2, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 3, 3, 47, 0, 0, 0, 1, 0, 0 };
                testData[51] = new double[] { 2, 2, 2, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 16, 0, 1, 0, 0, 0, 0 };
                testData[52] = new double[] { 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 27, 0, 0, 0, 0, 1, 0 };
                testData[53] = new double[] { 2, 2, 3, 2, 2, 2, 0, 3, 0, 0, 0, 2, 0, 0, 2, 2, 2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 3, 3, 2, 0, 0, 2, 2, 52, 0, 0, 0, 1, 0, 0 };
                testData[54] = new double[] { 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 25, 0, 0, 1, 0, 0, 0 };
                testData[55] = new double[] { 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 2, 1, 1, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1 };
                testData[56] = new double[] { 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 33, 0, 0, 0, 0, 1, 0 };
                testData[57] = new double[] { 2, 2, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 46, 0, 1, 0, 0, 0, 0 };
                testData[58] = new double[] { 1, 1, 2, 0, 0, 0, 3, 0, 3, 0, 1, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 7, 1, 0, 0, 0, 0, 0 };
                testData[59] = new double[] { 2, 3, 3, 3, 3, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 2, 2, 1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 30, 0, 0, 0, 0, 0, 1 };
                testData[60] = new double[] { 2, 2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 52, 0, 1, 0, 0, 0, 0 };

            }

            //BEAM BALANCE
            else
            {
                testData = new double[57][];

                testData[0] = new double[] { 1, 2, 1, 1, 1, 0, 0 };
                testData[1] = new double[] { 1, 2, 1, 2, 0, 1, 0 };
                testData[2] = new double[] { 1, 2, 1, 3, 0, 0, 1 };
                testData[3] = new double[] { 5, 5, 3, 1, 1, 0, 0 };
                testData[4] = new double[] { 1, 2, 1, 4, 0, 0, 1 };
                testData[5] = new double[] { 5, 5, 3, 2, 1, 0, 0 };
                testData[6] = new double[] { 1, 2, 1, 5, 0, 0, 1 };
                testData[7] = new double[] { 1, 2, 2, 1, 0, 1, 0 };
                testData[8] = new double[] { 1, 2, 2, 2, 0, 0, 1 };
                testData[9] = new double[] { 5, 5, 3, 3, 1, 0, 0 };
                testData[10] = new double[] { 1, 2, 2, 3, 0, 0, 1 };
                testData[11] = new double[] { 5, 5, 3, 4, 1, 0, 0 };
                testData[12] = new double[] { 1, 2, 2, 4, 0, 0, 1 };
                testData[13] = new double[] { 5, 5, 3, 5, 1, 0, 0 };
                testData[14] = new double[] { 1, 2, 2, 5, 0, 0, 1 };
                testData[15] = new double[] { 5, 5, 4, 1, 1, 0, 0 };
                testData[16] = new double[] { 1, 2, 3, 1, 0, 0, 1 };
                testData[17] = new double[] { 5, 5, 4, 2, 1, 0, 0 };
                testData[18] = new double[] { 1, 2, 3, 2, 0, 0, 1 };
                testData[19] = new double[] { 5, 5, 4, 3, 1, 0, 0 };
                testData[20] = new double[] { 1, 2, 3, 3, 0, 0, 1 };
                testData[21] = new double[] { 5, 5, 4, 4, 1, 0, 0 };
                testData[22] = new double[] { 1, 2, 3, 4, 0, 0, 1 };
                testData[23] = new double[] { 5, 5, 4, 5, 1, 0, 0 };
                testData[24] = new double[] { 1, 2, 3, 5, 0, 0, 1 };
                testData[25] = new double[] { 5, 5, 5, 1, 1, 0, 0 };
                testData[26] = new double[] { 1, 2, 4, 1, 0, 0, 1 };
                testData[27] = new double[] { 5, 5, 5, 2, 1, 0, 0 };
                testData[28] = new double[] { 1, 2, 4, 2, 0, 0, 1 };
                testData[29] = new double[] { 5, 5, 5, 3, 1, 0, 0 };
                testData[30] = new double[] { 1, 2, 4, 3, 0, 0, 1 };
                testData[31] = new double[] { 5, 5, 5, 4, 1, 0, 0 };
                testData[32] = new double[] { 1, 2, 4, 4, 0, 0, 1 };
                testData[33] = new double[] { 5, 5, 5, 5, 0, 1, 0 };
                testData[34] = new double[] { 1, 2, 4, 5, 0, 0, 1 };
                testData[35] = new double[] { 5, 3, 1, 1, 1, 0, 0 };
                testData[36] = new double[] { 1, 2, 5, 1, 0, 0, 1 };
                testData[37] = new double[] { 5, 3, 1, 2, 1, 0, 0 };
                testData[38] = new double[] { 1, 2, 5, 2, 0, 0, 1 };
                testData[39] = new double[] { 5, 3, 1, 3, 1, 0, 0 };
                testData[40] = new double[] { 1, 2, 5, 3, 0, 0, 1 };
                testData[41] = new double[] { 5, 3, 1, 4, 1, 0, 0 };
                testData[42] = new double[] { 1, 2, 5, 4, 0, 0, 1 };
                testData[43] = new double[] { 1, 3, 1, 1, 1, 0, 0 };
                testData[44] = new double[] { 1, 2, 5, 5, 0, 0, 1 };
                testData[45] = new double[] { 1, 3, 1, 2, 1, 0, 0 };
                testData[46] = new double[] { 1, 3, 1, 5, 0, 0, 1 };
                testData[47] = new double[] { 1, 3, 1, 3, 0, 1, 0 };
                testData[48] = new double[] { 1, 3, 1, 4, 0, 0, 1 };
                testData[49] = new double[] { 1, 3, 2, 1, 1, 0, 0 };
                testData[50] = new double[] { 1, 3, 2, 2, 0, 0, 1 };
                testData[51] = new double[] { 1, 3, 3, 1, 0, 1, 0 };
                testData[52] = new double[] { 1, 3, 2, 3, 0, 0, 1 };
                testData[53] = new double[] { 5, 3, 1, 5, 1, 0, 0 };
                testData[54] = new double[] { 1, 3, 2, 4, 0, 0, 1 };
                testData[55] = new double[] { 5, 3, 2, 1, 1, 0, 0 };
                testData[56] = new double[] { 1, 3, 2, 5, 0, 0, 1 };

            }
            Console.WriteLine("The training data is:");
            ShowMatrix(trainData, trainData.Length, 1, true);

            Console.WriteLine("The test data is:");
            ShowMatrix(testData, testData.Length, 1, true);

            Console.WriteLine("\nCreating a 4-input, 6-hidden, 3-output neural network");
            Console.WriteLine("Using tanh and softmax activations");
            int numInput;
            int numHidden;
            int numOutput;
            if (n == 1)
            {
                numInput = 34;
                numHidden = 6;
                numOutput = 2;
            }
            else if (n == 2)
            {
                numInput = 34;
                numHidden = 6;
                numOutput = 6;
            }
            else
            {
                numInput = 4;
                numHidden = 6;
                numOutput = 3;
            }

            NeuralNetwork nn = new NeuralNetwork(numInput, numHidden, numOutput);

            int numParticles = 20;
            int maxEpochs = 700;
            double exitError = 0.04;
            double probDeath = 0.005;

            Console.WriteLine("Setting numParticles = " + numParticles);
            Console.WriteLine("Setting maxEpochs = " + maxEpochs);
            Console.WriteLine("Setting early exit MSE error = " + exitError.ToString("F3"));
            Console.WriteLine("Setting probDeath = " + probDeath.ToString("F3"));
            // other optional PSO parameters (weight decay, death, etc) here

            Console.WriteLine("\nBeginning training using a particle swarm\n");
            Stopwatch stopwatch = Stopwatch.StartNew();
            double[] bestWeights = nn.Train(trainData, numParticles, maxEpochs, exitError, probDeath, testData);
            stopwatch.Stop();
            // double[] bestWeights = nn.Train(testData, numParticles, maxEpochs, exitError, probDeath);
            Console.WriteLine("Training complete");
            Console.WriteLine("Final neural network weights and bias values:");
            ShowVector(bestWeights, 10, 3, true);

            nn.SetWeights(bestWeights);
            double trainAcc = nn.Accuracy(trainData);
            // double trainAcc = nn.Accuracy(testData);
            Console.WriteLine("\nAccuracy on training data = " + trainAcc.ToString("F4"));

            double testAcc = nn.Accuracy(testData);
            // double testAcc = nn.Accuracy(trainData);
            Console.WriteLine("\nAccuracy on test data = " + testAcc.ToString("F4"));

            Console.WriteLine("\nEnd neural network training with particle swarm optimization demo\n");
            Console.ReadLine();


            Console.WriteLine("\nExecution Time (in seconds) = " + stopwatch.ElapsedMilliseconds / 1000.0);

        } // Main

        static void ShowVector(double[] vector, int valsPerRow, int decimals, bool newLine)
        {
            for (int i = 0; i < vector.Length; ++i)
            {
                if (i % valsPerRow == 0) Console.WriteLine("");
                Console.Write(vector[i].ToString("F" + decimals).PadLeft(decimals + 4) + " ");
            }
            if (newLine == true) Console.WriteLine("");
        }

        static void ShowMatrix(double[][] matrix, int numRows, int decimals, bool newLine)
        {
            for (int i = 0; i < numRows; ++i)
            {
                Console.Write(i.ToString().PadLeft(3) + ": ");
                for (int j = 0; j < matrix[i].Length; ++j)
                {
                    if (matrix[i][j] >= 0.0) Console.Write(" "); else Console.Write("-"); ;
                    Console.Write(Math.Abs(matrix[i][j]).ToString("F" + decimals) + " ");
                }
                Console.WriteLine("");
            }
            if (newLine == true) Console.WriteLine("");
        }

    } // class Program

    public class NeuralNetwork
    {
        //private static Random rnd; // for BP to initialize wts, in PSO 
        private int numInput;
        private int numHidden;
        private int numOutput;
        private double[] inputs;
        private double[][] ihWeights; // input-hidden
        private double[] hBiases;
        private double[] hOutputs;
        private double[][] hoWeights; // hidden-output
        private double[] oBiases;
        private double[] outputs;

        public NeuralNetwork(int numInput, int numHidden, int numOutput)
        {
            //rnd = new Random(16); // for particle initialization. 16 just gives nice demo
            this.numInput = numInput;
            this.numHidden = numHidden;
            this.numOutput = numOutput;
            this.inputs = new double[numInput];
            this.ihWeights = MakeMatrix(numInput, numHidden);
            this.hBiases = new double[numHidden];
            this.hOutputs = new double[numHidden];
            this.hoWeights = MakeMatrix(numHidden, numOutput);
            this.oBiases = new double[numOutput];
            this.outputs = new double[numOutput];
        } // ctor

        private static double[][] MakeMatrix(int rows, int cols) // helper for ctor
        {
            double[][] result = new double[rows][];
            for (int r = 0; r < result.Length; ++r)
                result[r] = new double[cols];
            return result;
        }


        public void SetWeights(double[] weights)
        {
            // copy weights and biases in weights[] array to i-h weights, i-h biases, h-o weights, h-o biases
            int numWeights = (numInput * numHidden) + (numHidden * numOutput) + numHidden + numOutput;
            if (weights.Length != numWeights)
                throw new Exception("Bad weights array length: ");

            int k = 0; // points into weights param

            for (int i = 0; i < numInput; ++i)
                for (int j = 0; j < numHidden; ++j)
                    ihWeights[i][j] = weights[k++];
            for (int i = 0; i < numHidden; ++i)
                hBiases[i] = weights[k++];
            for (int i = 0; i < numHidden; ++i)
                for (int j = 0; j < numOutput; ++j)
                    hoWeights[i][j] = weights[k++];
            for (int i = 0; i < numOutput; ++i)
                oBiases[i] = weights[k++];
        }

        public double[] GetWeights()
        {
            // returns the current set of wweights, presumably after training
            int numWeights = (numInput * numHidden) + (numHidden * numOutput) + numHidden + numOutput;
            double[] result = new double[numWeights];
            int k = 0;
            for (int i = 0; i < ihWeights.Length; ++i)
                for (int j = 0; j < ihWeights[0].Length; ++j)
                    result[k++] = ihWeights[i][j];
            for (int i = 0; i < hBiases.Length; ++i)
                result[k++] = hBiases[i];
            for (int i = 0; i < hoWeights.Length; ++i)
                for (int j = 0; j < hoWeights[0].Length; ++j)
                    result[k++] = hoWeights[i][j];
            for (int i = 0; i < oBiases.Length; ++i)
                result[k++] = oBiases[i];
            return result;
        }

        // ----------------------------------------------------------------------------------------

        public double[] ComputeOutputs(double[] xValues)
        {
            if (xValues.Length != numInput)
                throw new Exception("Bad xValues array length");

            double[] hSums = new double[numHidden]; // hidden nodes sums scratch array
            double[] oSums = new double[numOutput]; // output nodes sums

            for (int i = 0; i < xValues.Length; ++i) // copy x-values to inputs
                this.inputs[i] = xValues[i];

            for (int j = 0; j < numHidden; ++j)  // compute i-h sum of weights * inputs
                for (int i = 0; i < numInput; ++i)
                    hSums[j] += this.inputs[i] * this.ihWeights[i][j]; // note +=

            for (int i = 0; i < numHidden; ++i)  // add biases to input-to-hidden sums
                hSums[i] += this.hBiases[i];

            for (int i = 0; i < numHidden; ++i)   // apply activation
                this.hOutputs[i] = HyperTanFunction(hSums[i]); // hard-coded

            for (int j = 0; j < numOutput; ++j)   // compute h-o sum of weights * hOutputs
                for (int i = 0; i < numHidden; ++i)
                    oSums[j] += hOutputs[i] * this.hoWeights[i][j];

            for (int i = 0; i < numOutput; ++i)  // add biases to input-to-hidden sums
                oSums[i] += oBiases[i];

            double[] softOut = Softmax(oSums); // softmax activation does all outputs at once for efficiency
            Array.Copy(softOut, outputs, softOut.Length);

            double[] retResult = new double[numOutput]; // could define a GetOutputs method instead
            Array.Copy(this.outputs, retResult, retResult.Length);
            return retResult;
        } // ComputeOutputs

        private static double HyperTanFunction(double x)
        {
            if (x < -20.0) return -1.0; // approximation is correct to 30 decimals
            else if (x > 20.0) return 1.0;
            else return Math.Tanh(x);
        }

        private static double[] Softmax(double[] oSums)
        {
            // does all output nodes at once so scale doesn't have to be re-computed each time
            // determine max output sum
            double max = oSums[0];
            for (int i = 0; i < oSums.Length; ++i)
                if (oSums[i] > max) max = oSums[i];

            // determine scaling factor -- sum of exp(each val - max)
            double scale = 0.0;
            for (int i = 0; i < oSums.Length; ++i)
                scale += Math.Exp(oSums[i] - max);

            double[] result = new double[oSums.Length];
            for (int i = 0; i < oSums.Length; ++i)
                result[i] = Math.Exp(oSums[i] - max) / scale;

            return result; // now scaled so that xi sum to 1.0
        }

        // ----------------------------------------------------------------------------------------

        public double[] Train(double[][] trainData, int numParticles, int maxEpochs, double exitError, double probDeath, double[][] testData)
        {


            Random rnd = new Random(16); // 16 just gives nice demo

            int numWeights = (this.numInput * this.numHidden) + (this.numHidden * this.numOutput) +
              this.numHidden + this.numOutput;

            // use PSO to seek best weights
            double p=0, p2=0;


            int epoch = 0;
            double minX = -15.0;// for each weight. assumes data has been normalized about 0
            double maxX = 15.0;
            double w = 0.729; // inertia weight
            double c1 = 1.49445; // cognitive/local weight
            double c2 = 1.49445; // social/global weight
            double r1, r2; // cognitive and social randomizations
            double newEntropy;
            double minEntropy = Double.MaxValue;
            Particle[] swarm = new Particle[numParticles];
            // best solution found by any particle in the swarm. implicit initialization to all 0.0
            double[] bestGlobalPosition = new double[numWeights];
            double bestGlobalError = double.MaxValue; // smaller values better

            int minepoch = 0;
            double mintestacc = 0;
            double minimum = double.MaxValue;
            int limit = 400;

            //double minV = -0.01 * maxX;  // velocities
            //double maxV = 0.01 * maxX;

            // swarm initialization
            // initialize each Particle in the swarm with random positions and velocities
            for (int i = 0; i < swarm.Length; ++i)
            {
                double[] randomPosition = new double[numWeights];
                for (int j = 0; j < randomPosition.Length; ++j)
                {
                    //double lo = minX;
                    //double hi = maxX;
                    //randomPosition[j] = (hi - lo) * rnd.NextDouble() + lo;
                    randomPosition[j] = (maxX - minX) * rnd.NextDouble() + minX;
                }

                // randomPosition is a set of weights; sent to NN
                double error = MeanCrossEntropy(trainData, randomPosition);
                //double error = MeanSquaredError(trainData, randomPosition);
                double[] randomVelocity = new double[numWeights];

                for (int j = 0; j < randomVelocity.Length; ++j)
                {
                    //double lo = -1.0 * Math.Abs(maxX - minX);
                    //double hi = Math.Abs(maxX - minX);
                    //randomVelocity[j] = (hi - lo) * rnd.NextDouble() + lo;
                    double lo = 0.1 * minX;
                    double hi = 0.1 * maxX;
                    randomVelocity[j] = (hi - lo) * rnd.NextDouble() + lo;

                }
                swarm[i] = new Particle(randomPosition, error, randomVelocity, randomPosition, error); // last two are best-position and best-error

                // does current Particle have global best position/solution?
                if (swarm[i].error < bestGlobalError)
                {
                    bestGlobalError = swarm[i].error;
                    swarm[i].position.CopyTo(bestGlobalPosition, 0);
                }
            }
            // initialization

            p = bestGlobalError;
            p2 = p;


            // main PSO algorithm

            int[] sequence = new int[numParticles]; // process particles in random order
            for (int i = 0; i < sequence.Length; ++i)
                sequence[i] = i;



            while (epoch < maxEpochs)
            {
                if (bestGlobalError < exitError) break; // early exit (MSE error)

                double[] newVelocity = new double[numWeights]; // step 1
                double[] newPosition = new double[numWeights]; // step 2
                double newError = 0; // step 3
                double newErr;
                double prevBestError;
                Boolean flag = true;

                double sumError = 0;

                Shuffle(sequence, rnd); // move particles in random sequence

                for (int pi = 0; pi < swarm.Length; ++pi) // each Particle (index)
                {
                    int i = sequence[pi];
                    Particle currP = swarm[i]; // for coding convenience

                    // 1. compute new velocity
                    for (int j = 0; j < currP.velocity.Length; ++j) // each x value of the velocity
                    {
                        r1 = rnd.NextDouble();
                        r2 = rnd.NextDouble();

                        // velocity depends on old velocity, best position of parrticle, and 
                        // best position of any particle
                        newVelocity[j] = (w * currP.velocity[j]) +
                          (c1 * r1 * (currP.bestPosition[j] - currP.position[j])) +
                          (c2 * r2 * (bestGlobalPosition[j] - currP.position[j]));
                    }

                    newVelocity.CopyTo(currP.velocity, 0);

                    // 2. use new velocity to compute new position
                    for (int j = 0; j < currP.position.Length; ++j)
                    {
                        newPosition[j] = currP.position[j] + newVelocity[j];  // compute new position
                        if (newPosition[j] < minX) // keep in range
                            newPosition[j] = minX;
                        else if (newPosition[j] > maxX)
                            newPosition[j] = maxX;
                    }

                    newPosition.CopyTo(currP.position, 0);

                    

                    newError = MeanCrossEntropy(trainData, newPosition);
                    // newError = MeanSquaredError(trainData, newPosition);

                    newErr = GaussEntropy(trainData, newPosition);

                    sumError += newErr;

                    currP.error = newError;
                    /*
                    if (newError < currP.bestError)
                    {
                        newPosition.CopyTo(currP.bestPosition, 0);
                        currP.bestError = newError;
                    }
                    */

                    /*
                    if (epoch <= limit)
                    {
                        if (newError < bestGlobalError) // new global best?
                        {
                            newPosition.CopyTo(bestGlobalPosition, 0);
                            bestGlobalError = newError;
                        }
                    }
                    else
                    {
                        if (newErr < bestGlobalError) // new global best?
                        {
                            newPosition.CopyTo(bestGlobalPosition, 0);
                            bestGlobalError = newErr;
                        }
                    }
                    */
                    if (flag)
                    {
                        if (newError < bestGlobalError)
                        {
                            newPosition.CopyTo(bestGlobalPosition, 0);
                            prevBestError = bestGlobalError; 
                            bestGlobalError = newError;

                        }
                    }
                    else
                    {
                        if (newErr < bestGlobalError) 
                        {
                            newPosition.CopyTo(bestGlobalPosition, 0);
                            bestGlobalError = newErr;
                        }
                    }


                    //double die = rnd.NextDouble();
                    //if (die < probDeath)
                    //{
                    //    // new position, leave velocity, update error
                    //    for (int j = 0; j < currP.position.Length; ++j)
                    //        currP.position[j] = (maxX - minX) * rnd.NextDouble() + minX;
                    //    //currP.error = MeanSquaredError(trainData, currP.position);
                    //    currP.error = MeanCrossEntropy(trainData, currP.position);
                    //    currP.position.CopyTo(currP.bestPosition, 0);
                    //    currP.bestError = currP.error;

                    //    if (currP.error < bestGlobalError) // global best by chance?
                    //    {
                    //        bestGlobalError = currP.error;
                    //        currP.position.CopyTo(bestGlobalPosition, 0);
                    //    }
                    //}


                } // each Particle

                
                
                
                if(bestGlobalError<p)
                {
                    if (((p2 + p + bestGlobalError) / 3.0 )< bestGlobalError)
                    {
                    flag = false;
                     }


                }



                p2 = p;
                p = bestGlobalError;

                newEntropy = Entropy(bestGlobalPosition);
                SetWeights(bestGlobalPosition);
                double trainAcc = Accuracy(trainData);
                double testAcc = Accuracy(testData);
                Console.WriteLine(epoch + " " + newEntropy + " " + bestGlobalError + " " + trainAcc + " " + testAcc + " " + sumError + "\n");
                if (sumError < minimum)
                {
                    minimum = sumError;
                    minepoch = epoch;
                    mintestacc = testAcc;
                }

                ++epoch;

            } // while

            Console.WriteLine("minimum = " + minimum + " " + " minepoch = " + minepoch + " mintestacc = " + mintestacc);
            this.SetWeights(bestGlobalPosition);  // best position is a set of weights
            double[] retResult = new double[numWeights];
            Array.Copy(bestGlobalPosition, retResult, retResult.Length);
            return retResult;

        } // Train


        private double GaussEntropy(double[][] trainData, double[] weights)
        {

            this.SetWeights(weights);

            double sce = 0.0;
            double[] xValues = new double[numInput];
            double[] tValues = new double[numOutput];


            for (int i = 0; i < trainData.Length; ++i)
            {
                Array.Copy(trainData[i], xValues, numInput);
                Array.Copy(trainData[i], numInput, tValues, 0, numOutput);

                double[] yValues = this.ComputeOutputs(xValues);

                double currSum = 0.0;
                for (int j = 0; j < yValues.Length; ++j)
                {

                    currSum += tValues[j] * Math.Exp(-yValues[j] * yValues[j]);

                }
                sce += currSum;
            }
            return sce / trainData.Length;
        }

        //Entropy of weights
        private double Entropy(double[] weights)
        {
            this.SetWeights(weights); // copy the weights to evaluate in
            double[][] ihWeightsn;
            double[][] hoWeightsn;
            double sumih = 0;
            double sumho = 0;
            double min = 0;
            double max = 0;
            double entropy = 0;
            ihWeightsn = MakeMatrix(numInput, numHidden);
            hoWeightsn = MakeMatrix(numHidden, numOutput);
            double[] entropyih = new double[numHidden];
            double[] entropyho = new double[numOutput];

            for (int j = 0; j < numHidden; ++j)
                entropyih[j] = 0;
            for (int j = 0; j < numOutput; ++j)
                entropyho[j] = 0;

            for (int j = 0; j < numHidden; ++j)
            {
                sumih = 0;
                min = Double.MaxValue;
                max = Double.MinValue;
                for (int i = 0; i < numInput; ++i)
                {
                    if (min > ihWeights[i][j])
                        min = ihWeights[i][j];
                    if (max < ihWeights[i][j])
                        max = ihWeights[i][j];
                }
                for (int i = 0; i < numInput; ++i)
                {
                    ihWeightsn[i][j] = (ihWeights[i][j] - min) / (max - min);
                }
                for (int i = 0; i < numInput; ++i)
                    sumih += (ihWeightsn[i][j]);
                for (int i = 0; i < numInput; ++i)
                {
                    ihWeightsn[i][j] = ihWeightsn[i][j] / sumih;
                    // Console.WriteLine(min +" "+max);
                }
                // Console.WriteLine("\n");
            }
            for (int j = 0; j < numOutput; ++j)
            {
                min = Double.MaxValue;
                max = Double.MinValue;
                sumho = 0;
                for (int i = 0; i < numHidden; ++i)
                {
                    if (min > hoWeights[i][j])
                        min = hoWeights[i][j];
                    if (max < hoWeights[i][j])
                        max = hoWeights[i][j];
                }
                for (int i = 0; i < numHidden; ++i)
                {
                    hoWeightsn[i][j] = (hoWeights[i][j] - min) / (max - min);
                }

                for (int i = 0; i < numHidden; ++i)
                    sumho += hoWeightsn[i][j];
                for (int i = 0; i < numHidden; ++i)
                {
                    hoWeightsn[i][j] = hoWeightsn[i][j] / sumho;
                    // Console.WriteLine( hoWeightsn[i][j] + " ");
                }
                // Console.WriteLine("\n");
            }
            for (int j = 0; j < numHidden; ++j)
            {
                for (int i = 0; i < numInput; ++i)
                    entropyih[j] += (ihWeightsn[i][j] * Math.Exp(-(ihWeightsn[i][j] * ihWeightsn[i][j])));
                //if (ihWeightsn[i][j] == 0)
                //    entropyih[j] += 0;
                //else
                //entropyih[j] += -(ihWeightsn[i][j] * Math.Log(ihWeightsn[i][j],2));
            }
            for (int j = 0; j < numOutput; ++j)
            {
                for (int i = 0; i < numHidden; ++i)
                    entropyho[j] += entropyih[i] * hoWeightsn[i][j];
            }
            for (int j = 0; j < numOutput; ++j)
            {
                entropy += entropyho[j];
            }
            return entropy;
        }
        private static void Shuffle(int[] sequence, Random rnd)
        {
            for (int i = 0; i < sequence.Length; ++i)
            {
                int r = rnd.Next(i, sequence.Length);
                int tmp = sequence[r];
                sequence[r] = sequence[i];
                sequence[i] = tmp;
            }
        }

        private double MeanSquaredError(double[][] trainData, double[] weights)
        {
            // assumes that centroids and widths have been set!
            this.SetWeights(weights); // copy the weights to evaluate in
            double[] xValues = new double[numInput]; // inputs
            double[] tValues = new double[numOutput]; // targets
            double sumSquaredError = 0.0;
            for (int i = 0; i < trainData.Length; ++i) // walk through each training data item
            {
                // following assumes data has all x-values first, followed by y-values!
                Array.Copy(trainData[i], xValues, numInput); // extract inputs
                Array.Copy(trainData[i], numInput, tValues, 0, numOutput); // extract targets
                double[] yValues = this.ComputeOutputs(xValues); // compute the outputs using centroids, widths, weights, bias values
                for (int j = 0; j < yValues.Length; ++j)
                    sumSquaredError += ((yValues[j] - tValues[j]) * (yValues[j] - tValues[j]));
            }
            return sumSquaredError / trainData.Length;
        }

        // Entropies 
        private double MeanCrossEntropy(double[][] trainData, double[] weights)
        {

            this.SetWeights(weights); // load the weights and biases to examine into the NN

            double sce = 0.0; // sum of cross entropies of all data items
            double[] xValues = new double[numInput]; // inputs
            double[] tValues = new double[numOutput]; // targets


            for (int i = 0; i < trainData.Length; ++i)
            {
                Array.Copy(trainData[i], xValues, numInput); // extract inputs
                Array.Copy(trainData[i], numInput, tValues, 0, numOutput); // extract targets

                double[] yValues = this.ComputeOutputs(xValues);


                double currSum = 0.0;
                for (int j = 0; j < yValues.Length; ++j)
                {

                    // All entropies

                    // P*LOG(P)
                    currSum += tValues[j] * Math.Log(yValues[j]);
                    // P*EXP^(-P*P)
                    //currSum += tValues[j] * Math.Exp(-yValues[j] * yValues[j]);
                    // P*EXP^(1-P)
                    //   currSum += tValues[j] * Math.Exp(1-yValues[j]);


                }
                sce += currSum; // accumulate
            }

            // return sce / trainData.Length;
            return -sce / trainData.Length;
        } // MeanCrossEntropy



        // ----------------------------------------------------------------------------------------

        public double Accuracy(double[][] testData)
        {
            // percentage correct using winner-takes all
            int numCorrect = 0;
            int numWrong = 0;
            double[] xValues = new double[numInput]; // inputs
            double[] tValues = new double[numOutput]; // targets
            double[] yValues; // computed Y

            for (int i = 0; i < testData.Length; ++i)
            {
                Array.Copy(testData[i], xValues, numInput); // parse test data into x-values and t-values
                Array.Copy(testData[i], numInput, tValues, 0, numOutput);
                yValues = this.ComputeOutputs(xValues);
                int maxIndex = MaxIndex(yValues); // which cell in yValues has largest value?

                if (tValues[maxIndex] == 1.0) // ugly. consider AreEqual(double x, double y)
                    ++numCorrect;
                else
                    ++numWrong;
            }

            return (numCorrect * 1.0) / (numCorrect + numWrong); // ugly 2 - check for divide by zero
        }

        private static int MaxIndex(double[] vector) // helper for Accuracy()
        {
            // index of largest value
            int bigIndex = 0;
            double biggestVal = vector[0];
            for (int i = 0; i < vector.Length; ++i)
            {
                if (vector[i] > biggestVal)
                {
                    biggestVal = vector[i]; bigIndex = i;
                }
            }
            return bigIndex;
        }

    } // NeuralNetwork

    // ==============================================================================================

    public class Particle
    {
        public double[] position; // equivalent to NN weights
        public double error; // measure of fitness
        public double[] velocity;

        public double[] bestPosition; // best position found so far by this Particle
        public double bestError;

        //public double age; // optional used to determine death-birth

        public Particle(double[] position, double error, double[] velocity,
          double[] bestPosition, double bestError)
        {
            this.position = new double[position.Length];
            position.CopyTo(this.position, 0);
            this.error = error;
            this.velocity = new double[velocity.Length];
            velocity.CopyTo(this.velocity, 0);
            this.bestPosition = new double[bestPosition.Length];
            bestPosition.CopyTo(this.bestPosition, 0);
            this.bestError = bestError;

            //this.age = 0;
        }



    } // class Particle

} // ns